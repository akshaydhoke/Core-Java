These areas together ensure that Java programs can efficiently store data, execute methods, and manage memory >>

Heap: This is where all objects (instances of classes) are stored. It is managed by Java's garbage collector, which automatically frees up memory by clearing unused objects.
Stack: It stores method calls, local variables, and reference variables. Each thread has its own stack, and data is stored in a last-in, first-out (LIFO) order.
Method Area (or MetaSpace in modern Java versions): This holds class-level information such as class definitions, method data, and static variables. It's shared across all threads in a JVM.
Program Counter (PC) Register: This is used to store the address of the current instruction being executed. Each thread has its own PC register.
Native Method Stack: This area is used for the execution of native (non-Java) methods, like those written in C or C++.

=============================================================

Java: A high-level, object-oriented programming language.
JVM (Java Virtual Machine): Executes Java bytecode, making Java platform-independent.
JRE (Java Runtime Environment): Contains JVM and libraries needed to run Java applications.
JDK (Java Development Kit): Includes JRE, JVM, and development tools like compilers.

=============================================================

Interface in java 8/9

default Methods: Provide default implementations for interface methods, allowing you to add new methods without breaking existing code.
static Methods: Provide utility methods that can be called on the interface itself, not on instances of the interface.
private Methods: Allow you to create helper methods for use within default methods of the interface, promoting code reuse and organization.

=============================================================
GC Types >>

G1 GC is the most common choice for production environments (default for many JVM versions).
Parallel GC is used for high-throughput systems where pause times are less critical.
ZGC and Shenandoah GC are used in low-latency applications, especially for large heaps.

=============================================================

1) Classloader

Classloader is a subsystem of JVM which is used to load class files. Whenever we run the java program, it is loaded first by the classloader. There are three built-in classloaders in Java.

    Bootstrap ClassLoader: This is the first classloader which is the super class of Extension classloader. It loads the rt.jar file which contains all class files of Java Standard Edition like java.lang package classes, java.net package classes, java.util package classes, java.io package classes, java.sql package classes etc.
    Extension ClassLoader: This is the child classloader of Bootstrap and parent classloader of System classloader. It loades the jar files located inside $JAVA_HOME/jre/lib/ext directory.
    System/Application ClassLoader: This is the child classloader of Extension classloader. It loads the classfiles from classpath. By default, classpath is set to current directory. You can change the classpath using "-cp" or "-classpath" switch. It is also known as Application classloader.

Bootstrap ClassLoader (loaded from JRE/lib)
      |
Extension ClassLoader (loaded from JRE/lib/ext)
      |
System ClassLoader (loaded from application's classpath)

=============================================================
In Java, the **normal path** and **classpath** serve different purposes:

### Normal Path
- **Definition**: Refers to the system's environment variable that specifies where executable files are located.
- **Usage**: Used by the operating system to find executable files (e.g., Java runtime).
- **Example**: Directories containing `.exe` files on Windows or binaries on Unix/Linux.

### Classpath
- **Definition**: A parameter that tells the Java Virtual Machine (JVM) where to look for user-defined classes and packages.
- **Usage**: Used by the JVM to locate Java classes, libraries, and resources during runtime.
- **Example**: Directories and `.jar` files containing compiled Java classes.

### Summary
- **Normal Path**: Used by the OS for executables.
- **Classpath**: Used by the JVM for Java classes and resources.

=============================================================

In Java, JAR, WAR, and EAR are packaging formats used for different purposes:

### JAR (Java ARchive)
- **Purpose**: Packages Java classes, metadata, and resources into a single file.
- **Use Case**: Used for library files and standalone Java applications.
- **Extension**: `.jar`
- **Contents**: Compiled Java classes, images, properties files, etc.

### WAR (Web Application Archive)
- **Purpose**: Packages a web application, including servlets, JSPs, HTML, CSS, and other resources.
- **Use Case**: Deployed on web servers (e.g., Apache Tomcat).
- **Extension**: `.war`
- **Contents**: WEB-INF directory (with classes and libraries), static resources.

### EAR (Enterprise Archive)
- **Purpose**: Packages enterprise applications, which can include multiple modules like JARs and WARs.
- **Use Case**: Deployed in enterprise environments (e.g., application servers like JBoss).
- **Extension**: `.ear`
- **Contents**: Multiple JAR and WAR files, configuration files, and metadata.

### Summary
- **JAR**: For Java libraries and standalone apps.
- **WAR**: For web applications.
- **EAR**: For enterprise applications with multiple modules.
=============================================================

Callable Interface uses in java with simplest example

In Java, a Callable interface is part of the java.util.concurrent package and is used to define a task that can be executed by a thread.
Unlike Runnable, which does not return a result and cannot throw checked exceptions, Callable can return a result and can throw checked exceptions.

The Callable interface in Java is needed for several key reasons:

    Return Values: Unlike Runnable, Callable can return a result after execution, making it useful for tasks that compute values.

    Exception Handling: It can throw checked exceptions, allowing for more robust error handling within concurrent tasks.

    Concurrency Support: It integrates well with ExecutorService, enabling better management of thread execution and resource utilization.

In short, Callable is essential for tasks that require a result and need to handle exceptions in a concurrent environment.

import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

public class CallableExample {
    public static void main(String[] args) {
        // Create a Callable task
        Callable<Integer> task = new Callable<Integer>() {
            @Override
            public Integer call() throws Exception {
                // Simulate some computation
                int result = 0;
                for (int i = 1; i <= 5; i++) {
                    result += i; // Calculate the sum of first 5 integers
                }
                return result; // Return the result
            }
        };

        // Create an ExecutorService
        ExecutorService executor = Executors.newSingleThreadExecutor();
        
        // Submit the task to the executor
        Future<Integer> future = executor.submit(task);
        
        try {
            // Get the result from the Future
            Integer result = future.get();
            System.out.println("The result is: " + result);
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        } finally {
            // Shutdown the executor
            executor.shutdown();
        }
    }
}

Here's a concise comparison of submit() and execute() in ExecutorService:
submit()

    Return Type: Returns a Future<T>.
    Task Types: Accepts Callable<T> and Runnable.
    Exception Handling: Can catch exceptions via Future.get().
    Use Case: When you need a result or to handle exceptions.

execute()

    Return Type: Returns void.
    Task Types: Only accepts Runnable.
    Exception Handling: Unchecked exceptions propagate directly.
    Use Case: When you just want to run a task without a result.

In summary, use submit() for tasks needing results or exception handling, and execute() for simple tasks without those needs.

public class SubmitVsExecuteExample {
    public static void main(String[] args) {
        ExecutorService executor = Executors.newFixedThreadPool(2);

        // Using submit() with Callable
        Future<Integer> future = executor.submit(() -> {
            Thread.sleep(1000);
            return 42; // Return result
        });

        try {
            System.out.println("Result from submit: " + future.get());
        } catch (InterruptedException | ExecutionException e) {
            e.printStackTrace();
        }

        // Using execute() with Runnable
        executor.execute(() -> {
            System.out.println("Runnable task executed.");
            // Uncommenting the next line will cause an unchecked exception
            // throw new RuntimeException("Error in Runnable");
        });

        // Shutdown the executor
        executor.shutdown();
    }
}

=============================================================
Java Collection questions with simple answers and examples:

1. Difference between ArrayList and LinkedList in Java?
    Answer:
        ArrayList uses a dynamic array for storage, providing fast random access but slow insertions/deletions.
        LinkedList uses a doubly linked list for storage, providing slower random access but faster insertions and deletions.

Example:

ArrayList<Integer> arrayList = new ArrayList<>();
arrayList.add(10); // Fast access

LinkedList<Integer> linkedList = new LinkedList<>();
linkedList.add(10); // Fast insertion

+++++++++++++++++++++++++++++++++++++++++++

2. What is the difference between HashMap, TreeMap, and LinkedHashMap?

    Answer:
        HashMap: Unordered collection, does not maintain insertion order.
        TreeMap: Ordered by natural ordering of keys or by a provided comparator (sorted).
        LinkedHashMap: Maintains insertion order (or access order if specified).

Example:

Map<Integer, String> hashMap = new HashMap<>();
Map<Integer, String> treeMap = new TreeMap<>();
Map<Integer, String> linkedHashMap = new LinkedHashMap<>();

+++++++++++++++++++++++++++++++++++++++++++

3. How does HashSet maintain uniqueness, and what is the internal mechanism?

    Answer:
        HashSet ensures uniqueness by using hashCode() and equals() methods to determine if an element already exists in the set.

Example:

HashSet<Integer> set = new HashSet<>();
set.add(1);
set.add(2);
set.add(1);  // Duplicate, not added

+++++++++++++++++++++++++++++++++++++++++++

4. Explain how ConcurrentHashMap is different from HashMap.

    Answer:
        ConcurrentHashMap allows multiple threads to read and write concurrently without locking the entire map, whereas HashMap is not thread-safe.

Example:

ConcurrentHashMap<Integer, String> map = new ConcurrentHashMap<>();
map.put(1, "one");

+++++++++++++++++++++++++++++++++++++++++++

5. What happens when you use a null key in HashMap, TreeMap, or LinkedHashMap?

    Answer:
        HashMap: Allows one null key.
        TreeMap: Does not allow null as a key (throws NullPointerException).
        LinkedHashMap: Allows one null key.

Example:

HashMap<String, String> map = new HashMap<>();
map.put(null, "value");  // Works fine

+++++++++++++++++++++++++++++++++++++++++++

6. What is the time complexity of various operations in collections?

    Answer:
        ArrayList: O(1) for get(), O(n) for add() in worst case.
        LinkedList: O(1) for add() and remove(), O(n) for get().
        HashMap: O(1) for get(), put().
        TreeMap: O(log n) for get(), put().
        
+++++++++++++++++++++++++++++++++++++++++++        

7. How do you make a Collection thread-safe in Java?

    Answer:
        Use Collections.synchronizedList() or CopyOnWriteArrayList for thread-safe lists.

Example:

List<Integer> list = Collections.synchronizedList(new ArrayList<>());

+++++++++++++++++++++++++++++++++++++++++++

8. What is the performance difference between ArrayList and Vector?

    Answer:
        ArrayList is preferred over Vector because Vector is synchronized (slower) and its size doubles when full, whereas ArrayList grows dynamically.

Example:

List<Integer> vector = new Vector<>();
List<Integer> arrayList = new ArrayList<>();

+++++++++++++++++++++++++++++++++++++++++++

9. How does PriorityQueue work internally, and how would you implement a custom comparator for it?

    Answer:
        PriorityQueue is a heap-based data structure, where elements are ordered according to their natural order or a provided comparator.

Example:

PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
pq.add(10);
pq.add(5);
System.out.println(pq.poll());  // 10 (largest first)

+++++++++++++++++++++++++++++++++++++++++++

10. Can you explain the concept of "fail-fast" iterators and what happens when you modify a collection while iterating over it?

    Answer:
        A fail-fast iterator throws a ConcurrentModificationException if the collection is modified while iterating (except through the iterator itself).

Example:

List<Integer> list = new ArrayList<>();
list.add(1);
list.add(2);
Iterator<Integer> iterator = list.iterator();
list.add(3);  // Throws ConcurrentModificationException
iterator.next();

+++++++++++++++++++++++++++++++++++++++++++

11. What is the difference between HashSet and TreeSet?

    Answer:
        HashSet: Unordered, faster for basic operations (O(1)).
        TreeSet: Ordered (sorted by natural ordering or comparator), slower (O(log n)).

Example:

Set<Integer> hashSet = new HashSet<>();
Set<Integer> treeSet = new TreeSet<>();

+++++++++++++++++++++++++++++++++++++++++++

12. What is the purpose of Collections.unmodifiableList()?

    Answer:
        It wraps a list to make it immutable, meaning you cannot modify the original list after it's wrapped.

Example:

List<Integer> list = Arrays.asList(1, 2, 3);
List<Integer> unmodifiableList = Collections.unmodifiableList(list);
unmodifiableList.add(4);  // Throws UnsupportedOperationException



